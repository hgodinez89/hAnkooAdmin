--
-- You should execute this SQL with SYS user
-- You should change the user's password
CREATE USER PASS
  IDENTIFIED BY CPASS
  DEFAULT TABLESPACE USERS
  TEMPORARY TABLESPACE TEMP
  PROFILE DEFAULT
  ACCOUNT UNLOCK;
  GRANT ALTER USER TO PASS;
  GRANT CREATE SESSION TO PASS;
--
CREATE USER HUELLAS
  IDENTIFIED BY CHUELLAS
  DEFAULT TABLESPACE USERS
  TEMPORARY TABLESPACE TEMP
  PROFILE DEFAULT
  ACCOUNT UNLOCK;
  GRANT ALTER USER TO HUELLAS;
  GRANT SELECT_DICTIONARY TO HUELLAS;
  GRANT UPDATE ON SE_USUARIOS TO HUELLAS;
  GRANT CREATE SESSION TO HUELLAS;
--
CREATE USER SOPORTE
  IDENTIFIED BY APPSOPORTE
  DEFAULT TABLESPACE USERS
  TEMPORARY TABLESPACE TEMP
  PROFILE DEFAULT
  ACCOUNT UNLOCK;
  GRANT SELECT_DICTIONARY TO SOPORTE;
  GRANT ADMIN_APP_USER TO SOPORTE;
  ALTER USER SOPORTE DEFAULT ROLE ALL;
  GRANT CREATE SESSION TO SOPORTE; 
  ALTER USER SOPORTE QUOTA 128K ON USERS;
--
CREATE ROLE SELECT_DICTIONARY;

CREATE ROLE ADMIN_APP_USER;

GRANT SELECT ON SYS.DBA_USERS TO SELECT_DICTIONARY;

GRANT SELECT ON SYS.DBA_ROLE_PRIVS TO SELECT_DICTIONARY;

GRANT SELECT ON SYS.DBA_TABLESPACES TO SELECT_DICTIONARY;

GRANT SELECT ON SYS.DBA_USERS TO SE;

GRANT SELECT ON SYS.DBA_ROLE_PRIVS TO SE;

GRANT SELECT ON SYS.DBA_TABLESPACES TO SE;

CREATE OR REPLACE FUNCTION SYS.OBJECT_SCRIPT(pObjectType IN VARCHAR2,
                                             pNameObject IN VARCHAR2,
                                             pEstadoEj   OUT BOOLEAN,
                                             pError      OUT VARCHAR2
                                            ) RETURN LONG IS  
   --
   --  Se encarga de generar DDLS para los objetos indicados
   --
   vScript  LONG;
   --
BEGIN
   --  
   vScript := Dbms_MetaData.Get_DDL(pObjectType, pNameObject);
   --
   pEstadoEj := TRUE;
   --
   Return vScript;
   --
EXCEPTION
   WHEN OTHERS THEN
       pEstadoEj := FALSE;
       pError    := 'Error al generar el script de '||pObjectType||' - '||pNameObject||' - '||Sqlerrm;
       Return NULL;
END;

GRANT EXECUTE ON SYS.OBJECT_SCRIPT TO SELECT_DICTIONARY;

CREATE PUBLIC SYNONYM OBJECT_SCRIPT FOR SYS.OBJECT_SCRIPT;

--
-- Procedimientos
CREATE OR REPLACE PROCEDURE SYS.EXECUTE_DDL_PLSQL(  pSetencia IN    VARCHAR2,
                                                                                           pEstadoEj OUT BOOLEAN,
                                                                                           pError      OUT  VARCHAR2
                                                                                         ) IS  
   --
   --  Se encarga de ejecutar setencias DDL en bloques PL/SQL
   --
BEGIN
    --  
    Execute Immediate pSetencia;
    --
    pEstadoEj := TRUE;
    pError      := Null;
    --
EXCEPTION
    WHEN OTHERS THEN
             pEstadoEj := FALSE;
             pError      := 'Error al ejecutar DDL - '||Sqlerrm;
END;

GRANT EXECUTE ON SYS.EXECUTE_DDL_PLSQL TO SELECT_DICTIONARY;

GRANT EXECUTE ON SYS.EXECUTE_DDL_PLSQL TO PASS;

CREATE PUBLIC SYNONYM EXECUTE_DDL_PLSQL FOR SYS.EXECUTE_DDL_PLSQL;

--
-- Asigna el role a todos los usuarios
DECLARE
  Cursor cSentencia Is 
    Select 'GRANT SELECT_DICTIONARY TO '||UserName Role
      from Dba_Users
    Order by UserName;
BEGIN
  For x in cSentencia Loop
     Begin
       Execute Immediate x.Role;
     Exception
       When Others Then
           Dbms_Output.Put_Line('Error al ejecutar: '||x.Role||' - Error Oracle: '||Sqlerrm);
     End;
  End Loop;
END;

--
-- You need to replace ORACLE_HOME for your own Path.
CREATE TABLESPACE SE_DAT DATAFILE 
  'ORACLE_HOME\SE_DAT.DBF' SIZE 2M AUTOEXTEND ON NEXT 1M MAXSIZE UNLIMITED
LOGGING
ONLINE
PERMANENT
EXTENT MANAGEMENT LOCAL UNIFORM SIZE 40K
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT MANUAL
FLASHBACK ON;

--

CREATE TABLESPACE SE_IDX DATAFILE 
  'ORACLE_HOME\SE_IDX.DBF' SIZE 1M AUTOEXTEND ON NEXT 1M MAXSIZE UNLIMITED
LOGGING
ONLINE
PERMANENT
EXTENT MANAGEMENT LOCAL UNIFORM SIZE 40K
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT MANUAL
FLASHBACK ON;

--
-- You should change the user's password
CREATE USER SE
  IDENTIFIED BY SE
  DEFAULT TABLESPACE SE_DAT
  TEMPORARY TABLESPACE TEMP
  PROFILE DEFAULT
  ACCOUNT UNLOCK;
  GRANT RESOURCE TO SE;
  GRANT CONNECT TO SE;
  ALTER USER SE DEFAULT ROLE ALL;
  GRANT ALTER USER TO SE;
  GRANT CREATE SESSION TO SE;
  GRANT CREATE PROCEDURE TO SE;
  GRANT UNLIMITED TABLESPACE TO SE;
  GRANT CREATE ANY INDEX TO SE;
  GRANT CREATE VIEW TO SE;
  GRANT CREATE PUBLIC SYNONYM TO SE;
  ALTER USER SE QUOTA UNLIMITED ON SE_DAT;
  ALTER USER SE QUOTA UNLIMITED ON SE_IDX;
--
--
--
CREATE TABLE SE.SE_BACKUPS
(
  USER_GENERATION       VARCHAR2(30 BYTE)  NOT NULL,
  USER_LOGON            VARCHAR2(30 BYTE)  NOT NULL,
  DATE_GENERATION       DATE               NOT NULL,
  TYPE_BACKUP           VARCHAR2(5 BYTE),
  DB_USER_BACKUP        VARCHAR2(30 BYTE),
  DIRECTORY_GENERATION  VARCHAR2(200 BYTE)
)
TABLESPACE SE_DAT
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          10880K
            NEXT             40K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

ALTER TABLE SE.SE_BACKUPS ADD (
  CONSTRAINT CHK_SE_BACKUPS_TYPE_BACKUP
 CHECK (TYPE_BACKUP IN ('DB', 'USER')));

CREATE PUBLIC SYNONYM SE_BACKUPS FOR SE.SE_BACKUPS;

GRANT DELETE, INSERT, SELECT, UPDATE ON SE.SE_BACKUPS TO ADMIN_APP_USER;

GRANT REFERENCES, SELECT ON SE.SE_BACKUPS TO PUBLIC;

--
--
CREATE TABLE SE.SE_USUARIOS
(
  COD_COMPANIA  VARCHAR2(4 BYTE)                NOT NULL,
  COD_USUARIO   VARCHAR2(30 BYTE)               NOT NULL,
  NOM_USUARIO   VARCHAR2(400 BYTE),
  COD_ESTADO    VARCHAR2(4 BYTE)                DEFAULT 'ACT',
  ADMIN_USUARIO VARCHAR2(1 BYTE)                DEFAULT 'N',
  HUELLA        BLOB,
  USER_REG      VARCHAR2(30 BYTE),
  FECHA_REG     DATE,
  USER_MOD      VARCHAR2(30 BYTE),
  FECHA_MOD     DATE
)
TABLESPACE SE_DAT
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          10880K
            NEXT             40K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE UNIQUE INDEX PA.PK_SE_USUARIOS ON SE.SE_USUARIOS
(COD_COMPANIA, COD_USUARIO)
LOGGING
TABLESPACE SE_IDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          4160K
            NEXT             40K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

CREATE PUBLIC SYNONYM SE_USUARIOS FOR SE.SE_USUARIOS;


ALTER TABLE SE.SE_USUARIOS ADD (
  CONSTRAINT PK_SE_USUARIOS
 PRIMARY KEY
 (COD_COMPANIA, COD_USUARIO)
    USING INDEX 
    TABLESPACE SE_IDX
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          4160K
                NEXT             40K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                FREELISTS        1
                FREELIST GROUPS  1
               ));

ALTER TABLE SE.SE_USUARIOS ADD (
  CONSTRAINT FK_PA_COMPANIA_SE_USUARIOS 
 FOREIGN KEY (COD_COMPANIA) 
 REFERENCES PA.PA_COMPANIAS (COD_COMPANIA));

ALTER TABLE SE.SE_USUARIOS
 ADD CONSTRAINT CHK_SE_USUARIOS_ADMIN_USUARIO
 CHECK (ADMIN_USUARIO IN ('S', 'N'));

GRANT DELETE, INSERT, SELECT, UPDATE ON SE.SE_USUARIOS TO ADMIN_APP_USER;

GRANT REFERENCES, SELECT ON SE.SE_USUARIOS TO PUBLIC;

--

CREATE SEQUENCE SE.SQ_HUELLAS
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9999999999
NOCACHE 
CYCLE 
NOORDER;

GRANT SELECT ON SE.SQ_HUELLAS TO PUBLIC;

CREATE PUBLIC SYNONYM SQ_HUELLAS FOR SE.SQ_HUELLAS;

--

Insert into SE.SE_USUARIOS
   (COD_COMPANIA, COD_USUARIO, NOM_USUARIO, COD_ESTADO, ADMIN_USUARIO)
 Values
   ('01', 'SOPORTE', 'USUARIO SOPORTE APP', 'ACT', 'S');
COMMIT;

--

CREATE OR REPLACE FUNCTION SE.OBT_ROLE_USER(pNombreRole IN VARCHAR2,
                                            pCodUsuario IN VARCHAR2
                                           ) RETURN BOOLEAN IS  
   --
   --  Retorna TRUE si el usuario posee el role, en caso contrario FALSE
   --
   vExiste  NUMBER := 0;
   --
BEGIN
   --
   Select Count(1)
     into vExiste
     from Dba_Role_Privs
    where Grantee = pCodUsuario
      and Granted_Role = pNombreRole;
   --
   If vExiste > 0 Then
      Return TRUE;
   Else
      Return FALSE;
   End If;
   --
EXCEPTION
   WHEN OTHERS THEN
       Return FALSE;
END;

GRANT EXECUTE ON SE.OBT_ROLE_USER TO SELECT_DICTIONARY;

CREATE PUBLIC SYNONYM OBT_ROLE_USER FOR SE.OBT_ROLE_USER;

--