--
-- You need to replace ORACLE_HOME for your own Path.
CREATE TABLESPACE CL_DAT DATAFILE 
  'ORACLE_HOME\CL_DAT.DBF' SIZE 2M AUTOEXTEND ON NEXT 1M MAXSIZE UNLIMITED
LOGGING
ONLINE
PERMANENT
EXTENT MANAGEMENT LOCAL UNIFORM SIZE 40K
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT MANUAL
FLASHBACK ON;

--

CREATE TABLESPACE CL_IDX DATAFILE 
  'ORACLE_HOME\CL_IDX.DBF' SIZE 1M AUTOEXTEND ON NEXT 1M MAXSIZE UNLIMITED
LOGGING
ONLINE
PERMANENT
EXTENT MANAGEMENT LOCAL UNIFORM SIZE 40K
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT MANUAL
FLASHBACK ON;

--
-- You should change the user's password
CREATE USER CL
  IDENTIFIED BY CL
  DEFAULT TABLESPACE CL_DAT
  TEMPORARY TABLESPACE TEMP
  PROFILE DEFAULT
  ACCOUNT UNLOCK;
  GRANT RESOURCE TO CL;
  GRANT CONNECT TO CL;
  ALTER USER CL DEFAULT ROLE ALL;
  GRANT ALTER USER TO CL;
  GRANT CREATE SESSION TO CL;
  GRANT CREATE PROCEDURE TO CL;
  GRANT UNLIMITED TABLESPACE TO CL;
  GRANT CREATE ANY INDEX TO CL;
  GRANT CREATE VIEW TO CL;
  GRANT CREATE PUBLIC SYNONYM TO CL;
  ALTER USER CL QUOTA UNLIMITED ON CL_DAT;
  ALTER USER CL QUOTA UNLIMITED ON CL_IDX;

--
-- Tables
CREATE TABLE CL.CL_CLIENTES
(
  COD_COMPANIA      VARCHAR2(4 BYTE)                 NOT NULL,
  COD_CLIENTE       NUMBER(10)                       NOT NULL,
  NOMBRE            VARCHAR2(100 BYTE),
  PRIMER_APELLIDO   VARCHAR2(100 BYTE),
  SEGUNDO_APELLIDO  VARCHAR2(100 BYTE),
  NOMBRE_CLIENTE    VARCHAR2(300 BYTE),
  SEXO              VARCHAR2(1),
  EMAIL             VARCHAR2(100 BYTE),
  DIRECCION         VARCHAR2(500 BYTE),
  COD_ESTADO        VARCHAR2(4 BYTE)                 DEFAULT 'ACT',
  OBSERVACIONES     VARCHAR2(500 BYTE),
  USER_REG          VARCHAR2(30 BYTE),
  FECHA_REG         DATE,
  USER_MOD          VARCHAR2(30 BYTE),
  FECHA_MOD         DATE
)
TABLESPACE CL_DAT
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          10880K
            NEXT             40K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE UNIQUE INDEX CL.PK_CL_CLIENTES ON CL.CL_CLIENTES
(COD_COMPANIA, COD_CLIENTE)
LOGGING
TABLESPACE CL_IDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          4160K
            NEXT             40K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE PUBLIC SYNONYM CL_CLIENTES FOR CL.CL_CLIENTES;


ALTER TABLE CL.CL_CLIENTES ADD (
  CONSTRAINT PK_CL_CLIENTES
 PRIMARY KEY
 (COD_COMPANIA, COD_CLIENTE)
    USING INDEX 
    TABLESPACE CL_IDX
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          4160K
                NEXT             40K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                FREELISTS        1
                FREELIST GROUPS  1
               ));

ALTER TABLE CL.CL_CLIENTES
 ADD CONSTRAINT FK_PA_COMPANIA_CL_CLIENTES 
 FOREIGN KEY (COD_COMPANIA) 
 REFERENCES PA.PA_COMPANIAS (COD_COMPANIA);

GRANT DELETE, INSERT, SELECT, UPDATE, REFERENCES ON CL.CL_CLIENTES TO PUBLIC;

--
--
CREATE OR REPLACE TRIGGER CL.TRG_CL_CLIENTES_NOMBRECLIENTE
   BEFORE INSERT OR UPDATE OF 
   NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO ON 
   CL.CL_CLIENTES 
 REFERENCING NEW AS New OLD AS Old
 FOR EACH ROW
BEGIN
  --
  :NEW.Nombre_Cliente := SUBSTR(:NEW.Nombre||' '||:NEW.Primer_Apellido||' '||:NEW.Segundo_Apellido, 0, 300);
  --
END;
/

--
--
CREATE TABLE CL.CL_TEL_CLIENTES
(
  COD_COMPANIA  VARCHAR2(4 BYTE)                 NOT NULL,
  COD_CLIENTE   NUMBER(10)                       NOT NULL,
  COD_TIPO_TEL  VARCHAR2(4 BYTE)                 NOT NULL,
  NUM_TEL      NUMBER(8)                         NOT NULL
)
TABLESPACE CL_DAT
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          10880K
            NEXT             40K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE UNIQUE INDEX CL.PK_CL_TEL_CLIENTES ON CL.CL_TEL_CLIENTES
(COD_COMPANIA, COD_CLIENTE, COD_TIPO_TEL, NUM_TEL)
LOGGING
TABLESPACE CL_IDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          4160K
            NEXT             40K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE PUBLIC SYNONYM CL_TEL_CLIENTES FOR CL.CL_TEL_CLIENTES;


ALTER TABLE CL.CL_TEL_CLIENTES ADD (
  CONSTRAINT PK_CL_TEL_CLIENTES
 PRIMARY KEY
 (COD_COMPANIA, COD_CLIENTE, COD_TIPO_TEL, NUM_TEL)
    USING INDEX 
    TABLESPACE CL_IDX
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          4160K
                NEXT             40K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                FREELISTS        1
                FREELIST GROUPS  1
               ));

ALTER TABLE CL.CL_TEL_CLIENTES
 ADD CONSTRAINT FK_CL_CLIENTES_CL_TEL_CLIENTES 
 FOREIGN KEY (COD_COMPANIA, COD_CLIENTE) 
 REFERENCES CL.CL_CLIENTES (COD_COMPANIA, COD_CLIENTE);

ALTER TABLE CL.CL_TEL_CLIENTES
 ADD CONSTRAINT CHK_TEL_CLIENTES_COD_TIPO_TEL
 CHECK (COD_TIPO_TEL IN ('CEL', 'FAX', 'OFI', 'CAS'));

ALTER TABLE CL.CL_TEL_CLIENTES
 ADD CONSTRAINT CHK_TEL_CLIENTES_NUM_TEL
 CHECK (LENGTH(NUM_TEL) >= 8);

ALTER TABLE CL.CL_CLIENTES
 ADD CONSTRAINT CHK_CL_CLIENTES_COD_ESTADO
 CHECK (COD_ESTADO IN ('ACT', 'INA'));

GRANT DELETE, INSERT, SELECT, UPDATE ON CL.CL_TEL_CLIENTES TO PUBLIC;

--
--
CREATE TABLE CL.CL_DIAS_CLIENTES
(
  COD_COMPANIA  VARCHAR2(4 BYTE)                 NOT NULL,
  COD_CLIENTE   NUMBER(10)                       NOT NULL,
  COD_RUTA      NUMBER(10)                       NOT NULL,
  COD_DIA       VARCHAR2(1 BYTE)                 NOT NULL
)
TABLESPACE CL_DAT
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          10880K
            NEXT             40K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE UNIQUE INDEX CL.PK_CL_DIAS_CLIENTES ON CL.CL_DIAS_CLIENTES
(COD_COMPANIA, COD_CLIENTE, COD_RUTA, COD_DIA)
LOGGING
TABLESPACE CL_IDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          4160K
            NEXT             40K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE PUBLIC SYNONYM CL_DIAS_CLIENTES FOR CL.CL_DIAS_CLIENTES;


ALTER TABLE CL.CL_DIAS_CLIENTES ADD (
  CONSTRAINT PK_CL_DIAS_CLIENTES
 PRIMARY KEY
 (COD_COMPANIA, COD_CLIENTE, COD_RUTA, COD_DIA)
    USING INDEX 
    TABLESPACE CL_IDX
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          4160K
                NEXT             40K
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                FREELISTS        1
                FREELIST GROUPS  1
               ));

ALTER TABLE CL.CL_DIAS_CLIENTES
 ADD CONSTRAINT FK_RU_RUTAS_CL_DIAS_CLIENTES 
 FOREIGN KEY (COD_COMPANIA, COD_RUTA) 
 REFERENCES RU.RU_RUTAS (COD_COMPANIA, COD_RUTA);

ALTER TABLE CL.CL_DIAS_CLIENTES
 ADD CONSTRAINT CHK_CL_DIAS_CLIENTES_COD_DIA
 CHECK (COD_DIA IN ('L', 'M', 'K', 'J', 'V', 'S', 'D'));

GRANT DELETE, INSERT, SELECT, UPDATE ON CL.CL_DIAS_CLIENTES TO PUBLIC;

--
--
CREATE SEQUENCE CL.SQ_CODCLIENTE
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9999999999
NOCACHE 
NOCYCLE 
NOORDER;

GRANT SELECT ON CL.SQ_CODCLIENTE TO PUBLIC;

CREATE PUBLIC SYNONYM SQ_CODCLIENTE FOR CL.SQ_CODCLIENTE;

--
--
CREATE OR REPLACE FUNCTION CL.OBT_NOM_CLIENTE(pCodCompania  IN  VARCHAR2, 
                                              pCodCliente   IN  NUMBER,
                                              pEstadoEj     OUT BOOLEAN,
                                              pError        OUT VARCHAR2
                                             ) RETURN VARCHAR2 IS  
   --
   --  Se encarga de obtener el nombre del cliente
   --
   vNomCliente  VARCHAR2(300);
   --
BEGIN
   --  
   Select Nombre_Cliente
     into vNomCliente
     from Cl_Clientes
    where Cod_Compania = pCodCompania
      and Cod_Cliente  = pCodCliente;
   --
   pEstadoEj := TRUE;
   --
   Return vNomCliente;
   --
EXCEPTION
   WHEN NO_DATA_FOUND THEN
       pEstadoEj := FALSE;
       pError    := 'El cliente '||pCodCliente||' no existe';
       Return NULL;
   WHEN OTHERS THEN
       pEstadoEj := FALSE;
       pError    := 'Error al consultar el nombre del cliente - '||Sqlerrm;
       Return NULL;
END;

GRANT EXECUTE ON CL.OBT_NOM_CLIENTE TO PUBLIC;

CREATE PUBLIC SYNONYM OBT_NOM_CLIENTE FOR CL.OBT_NOM_CLIENTE;

--
--
CREATE OR REPLACE TRIGGER CL.TRG_CL_CLIENTES_AUDIT
   BEFORE INSERT OR UPDATE ON 
   CL.CL_CLIENTES 
 REFERENCING NEW AS New OLD AS Old
 FOR EACH ROW
BEGIN
  --
  If Updating Then
     :New.User_Mod  := User; 
     :New.Fecha_Mod := Trunc(Sysdate);
  Elsif Inserting Then
     :New.User_Reg  := User; 
     :New.Fecha_Reg := Trunc(Sysdate);
  End If;
  --
END;
/
--
CREATE OR REPLACE TRIGGER CL.TRG_CL_TEL_CLIENTES_AUDIT
   BEFORE UPDATE ON 
   CL.CL_TEL_CLIENTES 
 REFERENCING NEW AS New OLD AS Old
 FOR EACH ROW
BEGIN
  --
  Update Cl_Clientes
     set User_Mod     = User,
         Fecha_Mod    = Trunc(Sysdate)
   where Cod_Compania = :New.Cod_Compania
     and Cod_Cliente  = :New.Cod_Cliente;
  --
END;
/
--
CREATE OR REPLACE TRIGGER CL.TRG_CL_DIAS_CLIENTES_AUDIT
   BEFORE UPDATE ON 
   CL.CL_DIAS_CLIENTES 
 REFERENCING NEW AS New OLD AS Old
 FOR EACH ROW
BEGIN
  --
  Update Cl_Clientes
     set User_Mod     = User,
         Fecha_Mod    = Trunc(Sysdate)
   where Cod_Compania = :New.Cod_Compania
     and Cod_Cliente  = :New.Cod_Cliente;
  --
END;
/
--
--